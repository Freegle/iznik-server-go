{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This package provides Swagger API documentation for the Iznik API.\nThe problem is that we need to explicitly define the API operations here for them to be detected.",
    "title": "Iznik API.",
    "termsOfService": "https://www.ilovefreegle.org/terms",
    "contact": {
      "name": "Freegle Geeks",
      "url": "https://www.ilovefreegle.org/help",
      "email": "geeks@ilovefreegle.org"
    },
    "license": {
      "name": "GPL v2",
      "url": "https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html"
    },
    "version": "1.0"
  },
  "host": "api.ilovefreegle.org",
  "basePath": "/api",
  "paths": {
    "/activity": {
      "get": {
        "description": "# Returns the most recent activity in groups",
        "tags": [
          "message"
        ],
        "summary": "Get recent activity",
        "operationId": "getActivity",
        "responses": {
          "200": {
            "$ref": "#/responses/activityResponse"
          }
        }
      }
    },
    "/address": {
      "get": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "# Returns all addresses for the authenticated user",
        "tags": [
          "address"
        ],
        "summary": "List addresses for user",
        "operationId": "listAddresses",
        "responses": {
          "200": {
            "$ref": "#/responses/addressesResponse"
          }
        }
      }
    },
    "/address/{id}": {
      "get": {
        "description": "Returns a single address by ID",
        "tags": [
          "address"
        ],
        "summary": "Get address by ID",
        "operationId": "getAddress",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Address ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/addressResponse"
          },
          "404": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/chat": {
      "get": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "# Returns all chats for the authenticated user",
        "tags": [
          "chat"
        ],
        "summary": "List chats for user",
        "operationId": "listChats",
        "responses": {
          "200": {
            "$ref": "#/responses/chatsResponse"
          }
        }
      }
    },
    "/chat/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Returns a single chat by ID",
        "tags": [
          "chat"
        ],
        "summary": "Get chat by ID",
        "operationId": "getChat",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Chat ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/chatResponse"
          },
          "404": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/message/{ids}": {
      "get": {
        "description": "Returns messages by ID (comma separated)",
        "tags": [
          "message"
        ],
        "summary": "Get messages by ID",
        "operationId": "getMessages",
        "parameters": [
          {
            "type": "string",
            "description": "Message IDs (comma separated)",
            "name": "ids",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/messagesResponse"
          },
          "404": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Returns a single user by ID, or the current user if no ID",
        "tags": [
          "user"
        ],
        "summary": "Get user by ID",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userResponse"
          },
          "404": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/config/{key}": {
      "get": {
        "description": "Returns configuration by key",
        "tags": [
          "config"
        ],
        "summary": "Get configuration",
        "operationId": "getConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Configuration key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/configResponse"
          }
        }
      }
    },
    "/config/admin/spam_keywords": {
      "get": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Returns all spam keywords (Support/Admin only)",
        "tags": [
          "config"
        ],
        "summary": "List spam keywords",
        "operationId": "listSpamKeywords",
        "responses": {
          "200": {
            "$ref": "#/responses/spamKeywordsResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "403": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Creates a new spam keyword (Support/Admin only)",
        "tags": [
          "config"
        ],
        "summary": "Create spam keyword",
        "operationId": "createSpamKeyword",
        "parameters": [
          {
            "description": "Spam keyword object",
            "name": "spam_keyword",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSpamKeywordRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/spamKeywordResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "403": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/config/admin/spam_keywords/{id}": {
      "delete": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Deletes a spam keyword by ID (Support/Admin only)",
        "tags": [
          "config"
        ],
        "summary": "Delete spam keyword",
        "operationId": "deleteSpamKeyword",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Spam keyword ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContentResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "403": {
            "$ref": "#/responses/errorResponse"
          },
          "404": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/config/admin/worry_words": {
      "get": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Returns all worry words (Support/Admin only)",
        "tags": [
          "config"
        ],
        "summary": "List worry words",
        "operationId": "listWorryWords",
        "responses": {
          "200": {
            "$ref": "#/responses/worryWordsResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "403": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Creates a new worry word (Support/Admin only)",
        "tags": [
          "config"
        ],
        "summary": "Create worry word",
        "operationId": "createWorryWord",
        "parameters": [
          {
            "description": "Worry word object",
            "name": "worry_word",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWorryWordRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/worryWordResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "403": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    },
    "/config/admin/worry_words/{id}": {
      "delete": {
        "security": [
          {
            "BearerAuth": [
              "[]"
            ]
          }
        ],
        "description": "Deletes a worry word by ID (Support/Admin only)",
        "tags": [
          "config"
        ],
        "summary": "Delete worry word",
        "operationId": "deleteWorryWord",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Worry word ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContentResponse"
          },
          "400": {
            "$ref": "#/responses/errorResponse"
          },
          "401": {
            "$ref": "#/responses/errorResponse"
          },
          "403": {
            "$ref": "#/responses/errorResponse"
          },
          "404": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Aboutme": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/user"
    },
    "Activity": {
      "description": "Activity represents a recent activity in groups",
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/ActivityGroup"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "message": {
          "$ref": "#/definitions/ActivityMessage"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "ActivityGroup": {
      "description": "ActivityGroup represents a group in an activity",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "lat": {
          "type": "number",
          "format": "float",
          "x-go-name": "Lat"
        },
        "lng": {
          "type": "number",
          "format": "float",
          "x-go-name": "Lng"
        },
        "namedisplay": {
          "type": "string",
          "x-go-name": "Namedisplay"
        },
        "nameshort": {
          "type": "string",
          "x-go-name": "Nameshort"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "ActivityMessage": {
      "description": "ActivityMessage represents a message in an activity",
      "type": "object",
      "properties": {
        "arrival": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Arrival"
        },
        "delta": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Delta"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "Address": {
      "type": "object",
      "properties": {
        "buildingname": {
          "type": "string",
          "x-go-name": "Buildingname"
        },
        "departmentname": {
          "type": "string",
          "x-go-name": "Departmentname"
        },
        "dependentlocality": {
          "type": "string",
          "x-go-name": "Dependentlocality"
        },
        "dependentthoroughfaredescriptor": {
          "type": "string",
          "x-go-name": "Dependentthoroughfaredescriptor"
        },
        "doubledependentlocality": {
          "type": "string",
          "x-go-name": "Doubledependentlocality"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "instructions": {
          "type": "string",
          "x-go-name": "Instructions"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "x-go-name": "Lat"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "x-go-name": "Lng"
        },
        "organisationname": {
          "type": "string",
          "x-go-name": "Organisationname"
        },
        "pobox": {
          "type": "string",
          "x-go-name": "Pobox"
        },
        "postcode": {
          "type": "string",
          "x-go-name": "Postcode"
        },
        "posttown": {
          "type": "string",
          "x-go-name": "Posttown"
        },
        "subbuildingname": {
          "type": "string",
          "x-go-name": "Subbuildingname"
        },
        "thoroughfaredescriptor": {
          "type": "string",
          "x-go-name": "Thoroughfaredescriptor"
        },
        "userid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Userid"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/address"
    },
    "ChatRoom": {
      "type": "object",
      "properties": {
        "chattype": {
          "type": "string",
          "x-go-name": "Chattype"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "user1": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "User1"
        },
        "user2": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "User2"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/chat"
    },
    "ClosestGroup": {
      "type": "object",
      "properties": {
        "dist": {
          "type": "number",
          "format": "float",
          "x-go-name": "Dist"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "namedisplay": {
          "type": "string",
          "x-go-name": "Namedisplay"
        },
        "namefull": {
          "type": "string",
          "x-go-name": "Namefull"
        },
        "nameshort": {
          "type": "string",
          "x-go-name": "Nameshort"
        },
        "settings": {
          "type": "object",
          "x-go-name": "Settings"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/location"
    },
    "Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/item"
    },
    "Location": {
      "type": "object",
      "properties": {
        "areaid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Areaid"
        },
        "areaname": {
          "type": "string",
          "x-go-name": "Areaname"
        },
        "dist": {
          "type": "number",
          "format": "float",
          "x-go-name": "Dist"
        },
        "groupsnear": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClosestGroup"
          },
          "x-go-name": "GroupsNear"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "lat": {
          "type": "number",
          "format": "float",
          "x-go-name": "Lat"
        },
        "lng": {
          "type": "number",
          "format": "float",
          "x-go-name": "Lng"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/location"
    },
    "Map": {
      "description": "Map is a shortcut for map[string]interface{}, useful for JSON returns",
      "type": "object",
      "additionalProperties": {},
      "x-go-package": "github.com/gofiber/fiber/v2"
    },
    "Membership": {
      "type": "object",
      "title": "This is the membership we return to the client.  It includes some information not stored in the DB.",
      "properties": {
        "added": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Added"
        },
        "bbox": {
          "type": "string",
          "x-go-name": "Bbox"
        },
        "collection": {
          "type": "string",
          "x-go-name": "Collection"
        },
        "emailfrequency": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Emailfrequency"
        },
        "eventsallowed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Eventsallowed"
        },
        "groupid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Groupid"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "microvolunteeringallowed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Microvolunteeringallowed"
        },
        "namedisplay": {
          "type": "string",
          "x-go-name": "Namedisplay"
        },
        "namefull": {
          "type": "string",
          "x-go-name": "Namefull"
        },
        "nameshort": {
          "type": "string",
          "x-go-name": "Nameshort"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "userid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Userid"
        },
        "volunteeringallowed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Volunteeringallowed"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/user"
    },
    "Message": {
      "description": "Message represents a posting (offer or wanted)",
      "type": "object",
      "properties": {
        "arrival": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Arrival"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageAttachment"
          },
          "x-go-name": "MessageAttachments"
        },
        "availableinitially": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Availableinitially"
        },
        "availablenow": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Availablenow"
        },
        "canrepost": {
          "type": "boolean",
          "x-go-name": "Canrepost"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "deliverypossible": {
          "type": "boolean",
          "x-go-name": "Deliverypossible"
        },
        "fromuser": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Fromuser"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageGroup"
          },
          "x-go-name": "MessageGroups"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "x-go-name": "Lat"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "x-go-name": "Lng"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "outcomes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageOutcome"
          },
          "x-go-name": "MessageOutcomes"
        },
        "promisecount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Promisecount"
        },
        "promised": {
          "type": "boolean",
          "x-go-name": "Promised"
        },
        "promisedtoyou": {
          "type": "boolean",
          "x-go-name": "PromisedToYou"
        },
        "promises": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessagePromise"
          },
          "x-go-name": "MessagePromises"
        },
        "refchatids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "Refchatids"
        },
        "replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageReply"
          },
          "x-go-name": "MessageReply"
        },
        "replycount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Replycount"
        },
        "repostat": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Repostat"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "successful": {
          "type": "boolean",
          "x-go-name": "Successful"
        },
        "textbody": {
          "type": "string",
          "x-go-name": "Textbody"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unseen": {
          "type": "boolean",
          "x-go-name": "Unseen"
        },
        "url": {
          "type": "string",
          "x-go-name": "MessageURL"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "MessageAttachment": {
      "type": "object",
      "properties": {
        "archived": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Archived"
        },
        "externalmods": {
          "type": "object",
          "x-go-name": "Externalmods"
        },
        "externaluid": {
          "type": "string",
          "x-go-name": "Externaluid"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "ouruid": {
          "type": "string",
          "x-go-name": "Ouruid"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "paththumb": {
          "type": "string",
          "x-go-name": "Paththumb"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "MessageGroup": {
      "type": "object",
      "properties": {
        "approvedby": {
          "description": "There's a slight privacy issue in returning the approval id.  Potentially we might not want users to know that\ntheir messages are moderated, and we might not want to reveal the id of the moderator.  However it's a useful\nthing to be able to show mods themselves.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Approvedby"
        },
        "arrival": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Arrival"
        },
        "autoreposts": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Autoreposts"
        },
        "collection": {
          "type": "string",
          "x-go-name": "Collection"
        },
        "groupid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Groupid"
        },
        "msgid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Msgid"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "MessageOutcome": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "msgid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Msgid"
        },
        "outcome": {
          "type": "string",
          "x-go-name": "Outcome"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "MessagePromise": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "msgid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Msgid"
        },
        "promisedat": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Promisedat"
        },
        "userid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Userid"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "MessageReply": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "displayname": {
          "type": "string",
          "x-go-name": "Displayname"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "refmsgid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Refmsgid"
        },
        "userid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Userid"
        }
      },
      "x-go-package": "iznik-server-go/message"
    },
    "Ratings": {
      "type": "object",
      "properties": {
        "Down": {
          "type": "integer",
          "format": "uint64"
        },
        "Mine": {
          "type": "string"
        },
        "Up": {
          "type": "integer",
          "format": "uint64"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/user"
    },
    "User": {
      "type": "object",
      "properties": {
        "aboutme": {
          "$ref": "#/definitions/Aboutme"
        },
        "added": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Added"
        },
        "bouncing": {
          "type": "boolean",
          "x-go-name": "Bouncing"
        },
        "deleted": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deleted"
        },
        "displayname": {
          "type": "string",
          "x-go-name": "Displayname"
        },
        "donated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Donated"
        },
        "email": {
          "description": "Only returned for logged-in user.",
          "type": "string",
          "x-go-name": "Email"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserEmail"
          },
          "x-go-name": "Emails"
        },
        "expectedchats": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "ExpectedChats"
        },
        "expectedreplies": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpectedReplies"
        },
        "firstname": {
          "type": "string",
          "x-go-name": "Firstname"
        },
        "forgotten": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Forgotten"
        },
        "fullname": {
          "type": "string",
          "x-go-name": "Fullname"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "info": {
          "$ref": "#/definitions/UserInfo"
        },
        "lastaccess": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Lastaccess"
        },
        "lastlocation": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Lastlocation"
        },
        "lastname": {
          "type": "string",
          "x-go-name": "Lastname"
        },
        "lat": {
          "type": "number",
          "format": "float",
          "x-go-name": "Lat"
        },
        "ljuserid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Ljuserid"
        },
        "lng": {
          "type": "number",
          "format": "float",
          "x-go-name": "Lng"
        },
        "marketingconsent": {
          "type": "boolean",
          "x-go-name": "Marketingconsent"
        },
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Membership"
          },
          "x-go-name": "Memberships"
        },
        "newslettersallowed": {
          "type": "boolean",
          "x-go-name": "Newslettersallowed"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        },
        "phonelastclicked": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Lastclicked"
        },
        "phonelastsent": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Lastsent"
        },
        "profile": {
          "$ref": "#/definitions/UserProfile"
        },
        "relevantallowed": {
          "type": "boolean",
          "x-go-name": "Relevantallowed"
        },
        "settings": {
          "type": "object",
          "x-go-name": "Settings"
        },
        "showmod": {
          "type": "boolean",
          "x-go-name": "Showmod"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "spammer": {
          "type": "boolean",
          "x-go-name": "Spammer"
        },
        "supporter": {
          "type": "boolean",
          "x-go-name": "Supporter"
        },
        "systemrole": {
          "type": "string",
          "x-go-name": "Systemrole"
        },
        "trustlevel": {
          "type": "string",
          "x-go-name": "Trustlevel"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/user"
    },
    "UserEmail": {
      "type": "object",
      "properties": {
        "added": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Added"
        },
        "bounced": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Bounced"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "ourdomain": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ourdomain"
        },
        "preferred": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Preferred"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/user"
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "collected": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Collected"
        },
        "expectedreply": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Expectedreply"
        },
        "offers": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Offers"
        },
        "openage": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Openage"
        },
        "openoffers": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Openoffers"
        },
        "openwanteds": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Openwanteds"
        },
        "ratings": {
          "$ref": "#/definitions/Ratings"
        },
        "reneged": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Reneged"
        },
        "replies": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Replies"
        },
        "replytime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Replytime"
        },
        "taken": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Taken"
        },
        "wanteds": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Wanteds"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/user"
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "externalmods": {
          "type": "object",
          "x-go-name": "Externalmods"
        },
        "externaluid": {
          "type": "string",
          "x-go-name": "Externaluid"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "ours": {
          "type": "boolean",
          "x-go-name": "Ours"
        },
        "ouruid": {
          "type": "string",
          "x-go-name": "Ouruid"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "paththumb": {
          "type": "string",
          "x-go-name": "Paththumb"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/user"
    },
    "ConfigItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/config"
    },
    "SpamKeyword": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "word": {
          "type": "string",
          "x-go-name": "Word"
        },
        "exclude": {
          "type": "string",
          "x-go-name": "Exclude"
        },
        "action": {
          "type": "string",
          "x-go-name": "Action"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/config"
    },
    "WorryWord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "keyword": {
          "type": "string",
          "x-go-name": "Keyword"
        },
        "substance": {
          "type": "string",
          "x-go-name": "Substance"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/config"
    },
    "CreateSpamKeywordRequest": {
      "type": "object",
      "properties": {
        "word": {
          "type": "string",
          "x-go-name": "Word"
        },
        "exclude": {
          "type": "string",
          "x-go-name": "Exclude"
        },
        "action": {
          "type": "string",
          "x-go-name": "Action"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/config"
    },
    "CreateWorryWordRequest": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "string",
          "x-go-name": "Keyword"
        },
        "substance": {
          "type": "string",
          "x-go-name": "Substance"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/freegle/iznik-server-go/config"
    }
  },
  "responses": {
    "activityResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "addressResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Address"
      }
    },
    "addressesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "chatResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ChatRoom"
      }
    },
    "chatsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ChatRoom"
        }
      }
    },
    "errorResponse": {
      "description": "errorResponse is the error response",
      "schema": {
        "$ref": "#/definitions/Map"
      }
    },
    "messagesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Message"
        }
      }
    },
    "userResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "configResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ConfigItem"
      }
    },
    "spamKeywordsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SpamKeyword"
        }
      }
    },
    "spamKeywordResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/SpamKeyword"
      }
    },
    "worryWordsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/WorryWord"
        }
      }
    },
    "worryWordResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/WorryWord"
      }
    },
    "noContentResponse": {
      "description": "No Content"
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}